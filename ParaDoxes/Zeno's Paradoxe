import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

# Initial positions
achilles_position = 0.0
tortoise_position = 1.0  # Head start for the tortoise

# Speeds
achilles_speed = 1.0
tortoise_speed = 0.1

# Time step and total time
dt = 0.01
total_time = 10.0

# Lists to store positions over time
achilles_positions = []
tortoise_positions = []
times = []

# Simulation loop
time = 0.0
while time < total_time:
    achilles_position += achilles_speed * dt
    tortoise_position += tortoise_speed * dt

    achilles_positions.append(achilles_position)
    tortoise_positions.append(tortoise_position)
    times.append(time)

    time += dt

# Create a figure and axis for the plot with a smaller window
fig, ax = plt.subplots(figsize=(8, 5))
ax.set_xlim(0, total_time)
ax.set_ylim(0, max(tortoise_positions) + 0.5)
ax.set_xlabel("Time (s)", fontsize=12)
ax.set_ylabel("Position (m)", fontsize=12)
ax.set_title("Achilles and the Tortoise Paradox", fontsize=14, weight='bold')

# Plot the initial positions
achilles_line, = ax.plot([], [], 'r-', label="Achilles", lw=2)
tortoise_line, = ax.plot([], [], 'b-', label="Tortoise", lw=2)
text_annotation = ax.text(0.02, 0.78, "", transform=ax.transAxes, fontsize=10, va='top', ha='left')

# Initialization function for animation
def init():
    achilles_line.set_data([], [])
    tortoise_line.set_data([], [])
    text_annotation.set_text("")
    return achilles_line, tortoise_line, text_annotation

# Animation update function
def update(frame):
    achilles_line.set_data(times[:frame], achilles_positions[:frame])
    tortoise_line.set_data(times[:frame], tortoise_positions[:frame])

    # Annotate the plot with current positions
    annotation_text = (
        f"Time: {times[frame]:.2f}s\n"
        f"Achilles Position: {achilles_positions[frame]:.2f}m\n"
        f"Tortoise Position: {tortoise_positions[frame]:.2f}m"
    )
    text_annotation.set_text(annotation_text)

    # Highlight when Achilles overtakes the tortoise
    if achilles_positions[frame] >= tortoise_positions[frame]:
        ax.axvline(x=times[frame], color='green', linestyle='--')
        ax.text(times[frame], max(tortoise_positions) + 0.1,
                "Achilles overtakes the Tortoise",
                rotation=90, color='green', verticalalignment='bottom', ha='right')

    return achilles_line, tortoise_line, text_annotation

# Create the animation
ani = animation.FuncAnimation(fig, update, frames=len(times),
                              init_func=init, blit=True, repeat=False)

# Display the legend
ax.legend(loc='upper left', fontsize=10)

# Add grid for better visualization
ax.grid(True, linestyle='--', alpha=0.6)

# Adjust layout to fit everything neatly
plt.tight_layout()

# Show the plot with animation
plt.show()
